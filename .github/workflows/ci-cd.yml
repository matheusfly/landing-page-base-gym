name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      # Add a PostgreSQL service for testing if needed
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          cd backend
          pip install -r requirements.txt
          pip install pytest-cov

      # Run backend tests with coverage
      - name: Run Python tests
        working-directory: ./backend
        run: |
          python -m pytest tests/ -v --cov=app --cov-report=xml
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db

      # Upload coverage report
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          fail_ci_if_error: false

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: npm ci

      # Install Playwright browsers
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      # Run Playwright tests
      - name: Run Playwright tests
        run: npx playwright test
        env:
          PLAYWRIGHT_TEST_BASE_URL: http://localhost:5173

      # Upload test results if tests fail
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  deploy:
    name: Deploy to Railway
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Railway
        uses: railwayapp/action@v1.0.0
        with:
          service_id: ${{ secrets.RAILWAY_SERVICE_ID }}
          token: ${{ secrets.RAILWAY_TOKEN }}

  notify:
    name: Notify Status
    needs: [test, deploy]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Send notification
        if: failure()
        run: |
          echo "CI/CD Pipeline failed! Check the logs for details."
          # Add notification logic here (Slack, Discord, etc.)
        env:
          STATUS: ${{ needs.test.result || 'unknown' }}
